# voice_chat_basic.py
# Basic voice-enabled interactive message system
# Requirements: SpeechRecognition, pyttsx3, pyaudio (or use pipwin for pyaudio on Windows)

import speech_recognition as sr
import pyttsx3
import datetime
import time

# Initialize recognizer and TTS engine
recognizer = sr.Recognizer()
tts = pyttsx3.init()
tts.setProperty("rate", 165)  # speech rate

def speak(text: str):
    """Speak out the given text and also print it."""
    print("SYSTEM:", text)
    tts.say(text)
    tts.runAndWait()

def listen(timeout=5, phrase_time_limit=6):
    """
    Listen from the default microphone and return recognized text.
    Returns None if nothing recognized.
    """
    with sr.Microphone() as mic:
        # Optional: adjust for ambient noise for 0.5 seconds
        recognizer.adjust_for_ambient_noise(mic, duration=0.5)
        print("Listening... (say something)")
        try:
            audio = recognizer.listen(mic, timeout=timeout, phrase_time_limit=phrase_time_limit)
        except sr.WaitTimeoutError:
            print("No speech detected (timeout).")
            return None

    try:
        # Uses Google Speech Recognition (requires internet)
        text = recognizer.recognize_google(audio)
        print("YOU:", text)
        return text.lower()
    except sr.UnknownValueError:
        print("Could not understand audio.")
        return None
    except sr.RequestError as e:
        print("Could not request results from Google Speech Recognition service; {0}".format(e))
        return None

def process_command(text: str):
    """Simple processor: recognizes a few keywords, otherwise echoes back."""
    if text is None:
        speak("I didn't catch that. Please try again.")
        return True  # continue

    # Exit conditions
    if any(word in text for word in ("exit", "quit", "goodbye", "stop")):
        speak("Goodbye! Exiting now.")
        return False  # stop loop

    # Help
    if "help" in text:
        speak("You can say: time, hello, repeat, or exit. I will echo other sentences.")
        return True

    # Time
    if "time" in text:
        now = datetime.datetime.now().strftime("%I:%M %p on %B %d, %Y")
        speak(f"The current time is {now}")
        return True

    # Say hello
    if "hello" in text or "hi" in text:
        speak("Hello! How can I help you today?")
        return True

    # Repeat command: "repeat after me <something>"
    if text.startswith("repeat after me"):
        to_repeat = text.replace("repeat after me", "").strip()
        if to_repeat:
            speak(to_repeat)
        else:
            speak("I didn't hear what to repeat.")
        return True

    # Default behaviour: echo
    speak(f"You said: {text}")
    return True

def main():
    speak("Voice interactive system started. Say 'help' to hear commands.")
    running = True
    while running:
        text = listen(timeout=6, phrase_time_limit=7)
        running = process_command(text)
        # small pause to avoid overlapping TTS and mic
        time.sleep(0.5)

if __name__ == "__main__":
    main()
